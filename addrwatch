#!/usr/bin/env python2
# addrwatch - A Bitcoin Cash address watcher and notifier
# Author: Simon Volpert <simon@simonvolpert.com>
# This program is free software, released under the Apache License, Version 2.0. See the LICENSE file for more information
# Consult the README file for usage instructions and other helpful hints

import json, urllib, os, sys, subprocess, time, email, smtplib

# Some web hosts are not very diligent in keeping up-to-date
try:
        from email.mime.text import MIMEText  # Python 2.7+
except ImportError:
        from email.MIMEText import MIMEText  # Python 2.4

block_url = 'https://cashexplorer.bitcoin.com/insight-api/addr/%s'
price_url = 'https://api.coinmarketcap.com/v1/ticker/bitcoin-cash/'
currency_url = 'http://api.fixer.io/latest?base=USD&symbols=%s'
email_from = 'addrwatch <noreply@localhost.localdomain>'

text_body = [
	'Total address balance: %s',
	'Total address balance (%s): %s',
	'Unconfirmed balance: %s',
	'Unconfirmed balance (%s): %s',
	'Confirmed balance: %s',
	'Confirmed balance (%s): %s'
]

# Read configuration file
try:
	f = open(os.path.join(os.path.expanduser('~'), '.addrwatch.cfg'), 'r')
	user_cfg = True
except:
	try:
		f = open('addrwatch.cfg', 'r')
		user_cfg = False
	except:
		print(sys.exc_info()[1])
		print('''Could not open the configuration file.
Please copy addrwatch.cfg.sample to addrwatch.cfg or $HOME/.addrwatch.cfg and edit it to your liking.''')
		sys.exit(1)
lines = f.readlines()
f.close()

# Parse config file
config = {}
addresses = {}
for line in lines:
	# Skip blank lines and comments
	if line.strip() == '' or line.startswith('#'):
		continue
	# Split to key and value pairs
	words = line.strip().split('=')
	key = words[0].strip()
	value = '='.join(words[1:]).strip()
	if key == 'address':
		value = value.split(',')
		if len(value) == 0:
			continue
		elif len(value) == 1:
			value.append(0)
		else:
			try:
				value[1] = float(value[1])
			except ValueError:
				value[1] = 0
		addresses[value[0]] = value[1]
	else:
		config[key] = value

# Sanitize configuration
try:
	config['currency'] = config['currency'].upper()
except:
	config['currency'] = ''
try:
	config['frequency'] = int(config['frequency'])
	if config['frequency'] < 0:
		raise ValueError
except:
	print('Invalid or missing frequency setting, using defaults')
	config['frequency'] = 60
try:
	if config['notification'].lower() == 'yes':
		config['notification'] = True
	else:
		raise ValueError
except:
	config['notification'] = False
try:
	if config['unconfirmed'].lower() == 'yes':
		config['unconfirmed'] = True
	else:
		raise ValueError
except:
	config['unconfirmed'] = False
if 'email' not in config:
	config['email'] = ''
use_smtp = True
for setting in ['server', 'login', 'passwd']:
	if setting not in config or config[setting] == '':
		use_smtp = False
if 'email_from' not in config.keys() or config['email_from'] == '':
	config['email_from'] = email_from

# float amount -> str formatted amount
def btc(amount):
	result = ('%.8f' % amount).rstrip('0.')
	if result == '':
		return '0'
	return result
def fiat(amount):
	return ('%.2f' % amount)

# str URL -> str JSON data from the URL
def jsonload(url):
	webpage = urllib.urlopen(url)
	data = json.loads(''.join(webpage.readlines()))
	webpage.close()
	return data

while True:
	# Delay after the first pass
	try:
		data
	except NameError:
		pass
	else:
		try:
			time.sleep(config['frequency'])
		except KeyboardInterrupt:
			sys.exit()
	# Pull address balances from block explorer
	for addr in addresses.keys():
		try:
			data = jsonload(block_url % addr)
		except KeyboardInterrupt:
			sys.exit()
		except:
			print('Could not load address balance: %s' % sys.exc_info()[1])
			continue
		# Process address balance
		balance = data['balance']
		unconfirmed = data['unconfirmedBalance']
		if config['currency'] == '':
			rate = 1
		else:
			try:
				data = jsonload(price_url)
			except KeyboardInterrupt:
				sys.exit()
			except:
				print('Could not load conversion rate: %s' % sys.exc_info()[1])
				continue
			rate = float(data[0]['price_usd'])
			if config['currency'] != 'USD':
				try:
					data = jsonload(currency_url % config['currency'])
				except KeyboardInterrupt:
					sys.exit()
				except:
					print('Could not load conversion rate: %s' % sys.exc_info()[1])
					continue
				rate = rate * data['rates'][config['currency']]
		# Calculate balance change
		if config['unconfirmed']:
			balance += unconfirmed
		report = ''
		if balance != addresses[addr]:
			if config['currency'] != '':
				diff = fiat((balance - addresses[addr]) * rate)
			else:
				diff = btc(balance - addresses[addr])
			if diff > 0:
				report = 'Payment received: %s %s to address %s' % (diff, config['currency'], addr)
			elif diff < 0:
				report = 'Payment sent: %s %s from address %s' % (diff, config['currency'], addr)
		# Report balance change
		if report != '':
			# Desktop notification
			if config['notification'] and 'DISPLAY' in os.environ:
				subprocess.call(['notify-send', report])
			# Email message
			if config['email'] != '':
				# Format the message body
				text_body[0] = text_body[0] % btc(balance)
				text_body[2] = text_body[2] % btc(unconfirmed)
				text_body[4] = text_body[4] % btc(balance - unconfirmed)
				if config['currency'] == '':
					del(text_body[5])
					del(text_body[3])
					del(text_body[1])
				else:
					text_body[1] = text_body[1] % (config['currency'], fiat(balance * rate))
					text_body[3] = text_body[3] % (config['currency'], fiat(unconfirmed * rate))
					text_body[5] = text_body[5] % (config['currency'], fiat((balance - unconfirmed) * rate))
				message = MIMEText('\n'.join(text_body))
				# Add headers
				message['From'] = config['email_from']
				message['To'] = config['email']
				message['Subject'] = report
				message['Auto-Submitted'] = 'auto-generated'
				if use_smtp:
					try:
						server = smtplib.SMTP(config['server'])
						server.login(config['login'], config['passwd'])
						server.sendmail(message['From'], message['To'], message.as_string())
						server.quit()
					except KeyboardInterrupt:
						sys.exit()
					except:
						print('SMTP failed: %s' % sys.exc_info()[1])
				else:
					try:
						server = subprocess.Popen(['/usr/sbin/sendmail','-i', message['To']], stdin=subprocess.PIPE, stderr=subprocess.PIPE)
						server.communicate(message.as_string())
					except:
						print('Sendmail failed: %s' % sys.exc_info()[1])
			print(report)
		# Update balances
		addresses[addr] = balance
		for line in lines:
			if line.startswith('address=%s' % addr):
				lines[lines.index(line)] = 'address=%s,%s\n' % (addr, btc(balance))
				break
	# Write updates to the config file
	if user_cfg:
		f = open(os.path.join(os.path.expanduser('~'), '.addrwatch.cfg'), 'w')
	else:
		f = open('addrwatch.cfg', 'w')
	f.writelines(lines)
	f.close()
	if config['frequency'] == 0:
		sys.exit()
